"""
Django settings for django_blog project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'wuzg$w5uj^byn@h@v3_duw*!3eefq@iw!sap%8dbr@*&98dcp('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['192.168.102.104', '*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog',
    'django_summernote',
    'debug_toolbar',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = 'django_blog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'blog/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
                'blog.views.get_local_msg',
                'django.template.context_processors.i18n',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_blog.wsgi.application'

SUMMERNOTE_CONFIG = {
    'summernote': {
        # 汉化文本框的显示
        'lang': 'zh-CN'
    },
}

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    },
    'mysql_db': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'django_blog',
        'USER': 'root',
        'PASSWORD': 'root',
    }
}

DATABASE_APPS_MAPPING = {
    'blog': 'mysql_db',
    'auth': 'mysql_db',
    'sessions': 'mysql_db',
    'contenttypes': 'mysql_db',
    'admin': 'mysql_db',
    'django_summernote': 'mysql_db'

}

DATABASE_ROUTERS = [
    'django_blog.database_app_router.DatabaseAppsRouter',
]

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'

# 图片上传路径
MEDIA_URL = '/uploads/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')

# 自定义用户 model
AUTH_USER_MODEL = 'blog.User'

# 定义 debug_toolbar 允许在 对应ip中显示
INTERNAL_IPS = ('127.0.0.1', )
DEBUG_TOOLBAR_PATCH_SETTINGS = False

# 网站基本信息
SITE_NAME = 'Iyuers的个人博客'
SITE_DESC = '梦虽虚幻,却是自己的梦想；位虽低微,却是自己的岗位；' \
           '屋虽简陋,却是自己的家；志虽渺小,却是自己的追求。'
WEIBO_SINA = 'http://sina.com'
WEIBO_TENCENT = 'http...'
PRO_RSS = 'http...'
PRO_EMAIL = 'iyuers@iyuers.com'

# 加入缓存配置 CACHES
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'filecache'),
        'TIMEOUT': 60,
        'OPTIONS': {
            'MAX_ENTRIES': 1000
        }
    }
}

# logger 日志器设置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            # 日志格式
            'format': '%(asctime)s [%(threadName)s: %(thread)d] [%(name)s: %(lineno)d] [%(module)s: %(funcName)s] [%(levelname)s] - %(message)s'
        }
    },
    'filters': {
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
        },
        'default': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            # 日志输出文件
            'filename': 'log/all.log',
            # 文件大小
            'maxBytes': 1024*1024*5,
            # 备份次数
            'backupCount': 5,
            # 使用哪种 formatters 日志格式
            'formatter': 'standard',
        },
        # 错误日志信息；
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'log/error.log',
            'maxBytes': 1024*1024*5,
            'backupCount': 5,
            'formatter': 'standard',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'log/all.log',
            'formatter': 'standard'
        },
        # 页面有请求信息时，的 日志信息；
        'request_handler': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'log/script.log',
            'maxBytes': 1024*1024*5,
            'backupCount': 5,
            'formatter': 'standard',
        },
        # script 文件的请求，日志信息；
        'scripts_handler': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'log/script.log',
            'maxBytes': 1024*1024*5,
            'backupCount': 5,
            'formatter': 'standard',

        }
    },
    # 定义日志器
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True
        },
        'django.template': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True
        },
        'django_request': {
            'handlers': ['request_handler'],
            'level': 'DEBUG',
            'propagate': False
        },
        'scripts': {
            'handlers': ['scripts_handler'],
            # 普通消息级别
            'level': 'INFO',
            'propagate': False
        },
        # 这里是 blog 的 app 下的，views.py 文件，日志器；
        'blog_views': {
            'handlers': ['default', 'error'],
            'level': 'DEBUG',
            'propagate': True
        },
        # 数据库操作日志器，数据库的操作都会在 console 控制台显示；
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True
        }
    }
}
